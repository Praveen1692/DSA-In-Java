GCD(The Greatest Common Divisor (GCD));
For example:
36=2*2*3*3;
60=2*2*3*5;
=> 2*2*3=12


 public static int Fact(int a, int b) {

        if (a == 0) {
            return b;
        }
        if (b == 0) {
            return a;
        }

        if (a > b) {
            return Fact(a - b, b);

        } else {
            return Fact(a, b - a);
        }

    }


---> Print FIbonanic series withour recursion
 public static void Fact(int a) {
        int first = 0;
        int second = 1;
        int next;
        System.out.print(first);
        for (int i = 1; i < a; i++) {
            System.out.print(second + " ");
            next = first + second;
            first = second;
            second = next;
        }
        System.out.println();

    }


--------------------------------------------
Swap 0's and 1s:
  int start = 0;
        int last = arr.length - 1;
        while (start < last) {
            if (arr[start] == 0) {
                start++;
            }
            if (arr[last] == 1) {
                last--;
            }
            if (arr[start] != 0 && arr[last] != 1) {
                int temp = arr[start];
                arr[start] = arr[last];
                arr[last] = temp;
                start++;
                last--;

            }

        }


-----------------------------------------------------------------------------------
 Merge two sorted Array;
 // Main.java

import java.util.Arrays;

public class Main {

    public static void main(String[] args) {

        int[] arr1 = { 30, 70, 80 };
        int[] arr2 = { 10, 20, 30, 40, 50 };

        int[] arr3 = new int[arr1.length + arr2.length];
        System.out.println(Arrays.toString(arr3));

        int i = 0;
        int j = 0;
        int k = 0;

        while ((i < arr1.length && j < arr2.length)) {
            if (arr1[i] < arr2[j]) {
                arr3[k] = arr1[i];
                i++;
            } else {
                arr3[k] = arr2[j];
                j++;
            }
            k++;

        }

        while (i < arr1.length) {
            arr3[k] = arr1[i];
            i++;
            k++;

        }
        while (j < arr2.length) {
            arr3[k] = arr2[j];
            j++;
            k++;

        }
        System.out.println(Arrays.toString(arr3));

    }

}

------------------------------------------------------------------------

Binary Search;

int[] arr = { 2, 4, 6, 12, 14, 16 };
int key = 14;
int start = 0;
int end = arr.length - 1;
int ans = -1;

while (start <= end) {
    int mid = start + (end - start) / 2; // Avoid potential overflow
    if (arr[mid] == key) {
        ans = mid;
        break;
    } else if (arr[mid] > key) {
        end = mid - 1;
    } else {
        start = mid + 1;
    }
}

System.out.println(ans);

-------------------------------------------------------------------------------

Check two String are anagram or not;


    static boolean anagram(String a, String b) {
        if (a.length() != b.length()) {
            return false;
        }
        int[] hash1 = new int[256];
        int[] hash2 = new int[256];

        for (int i = 0; i < a.length(); i++) {
            hash1[a.charAt(i)]++;
        }

        for (int i = 0; i < b.length(); i++) {
            hash2[b.charAt(i)]++;
        }

        // compare hash1 and hash2 arrary;
        for (int i = 0; i < 256; i++) {
            if (hash1[i] != hash2[i]) {
                return false;

            }
        }
        return true;

    }



---------------- Optional :2
static boolean anagram(String a, String b) {
        if (a.length() != b.length()) {
            return false;
        }
        int[] hash1 = new int[26];

        for (int i = 0; i < a.length(); i++) {
            hash1[a.charAt(i) - 'a']++;
        }

        for (int i = 0; i < b.length(); i++) {
            hash1[b.charAt(i) - 'a']--;
        }

        // compare hash1 and hash2 arrary;
        for (int i = 0; i < 26; i++) {
            if (hash1[i] != 0) {
                return false;

            }
        }
        return true;

    }



--------------  compareSS Strings
 String a = "aaabbccd";

        String re = "";
        int count = 1;
        for (int i = 1; i < a.length(); i++) {

            char curr = a.charAt(i);
            char prev = a.charAt(i - 1);

            if (curr == prev) {
                count = count + 1;
            } else {
                re = re + prev + count;
                count = 1;

            }
        }
        re = re + a.charAt(a.length() - 1) + count;
        System.out.println(re);



-------------------------Bubbole Sort-------------------------
for (int i = 0; i < arr.length - 1; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] <= arr[j]) {
                    System.out.println("Swapping " + arr[i] + " and " + arr[j]);
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }


------------------ MergeSort----------------------
import java.util.Arrays;


public class Main {

    public static void mergeSort(int[] arr, int start, int end) {
        if (start < end) {
            int mid = start + (end - start) / 2;
            mergeSort(arr, start, mid);
            mergeSort(arr, mid + 1, end);
            merge(arr, start, mid, end);
        }
    }

    public static void merge(int[] arr, int start, int mid, int end) {
        int n1 = mid - start + 1;
        int n2 = end - mid;

        int[] leftArray = new int[n1];
        int[] rightArray = new int[n2];

        // Copy data to temporary arrays
        for (int i = 0; i < n1; i++) {
            leftArray[i] = arr[start + i];
        }
        for (int j = 0; j < n2; j++) {
            rightArray[j] = arr[mid + 1 + j]; // Fixed: Start from mid + 1
        }

        int i = 0; // Index for leftArray
        int j = 0; // Index for rightArray
        int k = start; // Index for merged array

        // Merge the two arrays
        while (i < n1 && j < n2) {
            if (leftArray[i] <= rightArray[j]) {
                arr[k] = leftArray[i];
                i++;
            } else {
                arr[k] = rightArray[j];
                j++;
            }
            k++;
        }

        // Copy remaining elements of leftArray, if any
        while (i < n1) {
            arr[k] = leftArray[i];
            i++;
            k++;
        }

        // Copy remaining elements of rightArray, if any
        while (j < n2) {
            arr[k] = rightArray[j];
            j++;
            k++;
        }
    }

    public static void main(String[] args) {
        // Merge Sort
        int[] arr = {12, 11, 13, 5, 6, 7};
        System.out.println("Given Array:");
        System.out.println(Arrays.toString(arr)); // Print the unsorted array
        mergeSort(arr, 0, arr.length - 1);
        System.out.println("Sorted Array:");
        System.out.println(Arrays.toString(arr)); // Print the sorted array
    }
}



---------------------------------- Transpose for 2-D Matrix----------------

{its only work in square matix}
for (int i = 0; i < matrix.length; i++) {
            for (int j = i; j < matrix.length; j++) { // j should we start from i;
             int temp=matrix[i][j];
             matrix[i][j]=matrix[j][i];
             matrix[j][i]=temp;

        }
}



---------------------- Rotated a matrix by 90o--------------------------

step-1--> Transpose of matrix;
step-2--> Reverse the each row of matrix;


 static void reversedArray(int[] arr) {
        int i = 0;
        int j = arr.length - 1;
        while (i < j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;

        }

    }




int[][] matrix = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };

        printMatrix(matrix);
        for (int i = 0; i < matrix.length; i++) {
            for (int j = i; j < matrix.length; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;

            }
        }

        for (int i = 0; i < matrix.length; i++) {
            reversedArray(matrix[i]);
        }
        System.out.println("ans");
        printMatrix(matrix);



*----------------------------------------------------------------- Print the pascal triangle---------------
 static int[][] pascal(int n) {
        int[][] ans = new int[n][];
        for (int i = 0; i < n; i++) {
            // ith row hai i+1 columns;
            ans[i] = new int[i + 1];

            // 1st and last element of every row is 1;
            ans[i][0] = ans[i][i] = 1;


            // for to add the sum of upper to number;
            for (int j = 1; j < i; j++) {
                ans[i][j] = ans[i - 1][j] + ans[i - 1][j - 1];
            }
        }

        return ans;

    }
*---------------------------------------------------------- Find The First Occurence of an element in sorted Array-------------------------
 public static int firstOccurence(int[] arr, int target) {
        int ans = -1;
        int start = 0;
        int end = arr.length;
        while (start < end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] == target && arr[mid] == arr[mid - 1]) {
                end = mid - 1;

            }
            if (arr[mid] < target) {
                start = mid + 1;
            }
            if (arr[mid] == target) {
                ans = mid;
                return ans;
            }

        }

        return ans;

    }

------------------------------------------------------------------- Quick Sort----------------------------
static void quickSort(int[] arr, int start, int end) {
        if (start >= end) {
            return;
        }
        int pvIndex = getPartition(arr, start, end);
        quickSort(arr, start, pvIndex - 1);
        quickSort(arr, pvIndex + 1, end);
    }

    static int getPartition(int[] arr, int start, int end) {
        int pivot = arr[start];
        int i = start + 1;
        int j = end;

        while ((i <= j)) {
            while (i <= end && arr[i] <= pivot) {
                i++;

            }
            while (j >= start && arr[j] > pivot) {
                j--;

            }
            if (i < j) {
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }

        }
        // Place pivot in its final position
        int temp = arr[start];
        arr[start] = arr[j];
        arr[j] = temp;

        return j;

    }


--------------------------------------------------- Find the square root of given number-------
public static int squareRoot(int num) {
    if (num < 0) return -1; // Handle negative input (optional)
    if (num == 0) return 0; // Handle zero

    int start = 0;
    int end = num;
    int ans = -1;

    while (start <= end) {
        int mid = start + (end - start) / 2;
        long value = (long) mid * mid; // Cast to long to avoid overflow

        if (value == num) {
            // Perfect square root found
            return mid;
        } else if (value < num) {
            // Store the floor value and search in the right half
            ans = mid;
            start = mid + 1;
        } else {
            // Search in the left half, don’t update ans
            end = mid - 1;
        }
    }
    return ans;
}

---------------------------------------------------- Insertion Sort--------------------
public static void insertionSort(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            int j = i;
            while (j > 0 && arr[j] < arr[j - 1]) {
                // swap the elements arr[j] and arr[j-1];
                int temp = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = temp;

                j--;

            }
        }
    }


----------------------------------------------- Balanced Paranthesis------------------------------------
public static boolean isbalanced(String str) {
        Stack<Character> stk = new Stack<>();
        int i = 0;
        while (i < str.length()) {
            if (str.charAt(i) == '(') {
                stk.push(str.charAt(i));
            }
            if (str.charAt(i) == ')') {
                if (stk.isEmpty()) {
                    return false;
                }
                stk.pop();
            }
            i++;

        }

        if (stk.isEmpty()) {
            return true;
        }

        return false;
    }
------------------------------------------------------------- Write a program to print n natural number from 1 to n using recursion;
public static void pp(int n) {

        // base case
        if (n < 1) {

            return;
        }
        pp(n - 1);
        System.out.print(n + " ");

    }
--------------------------------------------------------------write a program to print all natural number from n to 1;--------------
  public static void pp(int n) {

        // base case
        if (n < 1) {

            return;
        }
        System.out.print(n + " ");
        pp(n - 1);

    }
-------------------------------------------------------  factorial Program---------------------------
static int fact(int n) {
        // base condition
        if (n == 0 || n == 1) {
            return n;
        }
        return n * fact(n - 1);
    }
--------------------------------------------------------- to find nth FIbonanic number--------------
 static int fib(int n) {

        if (n == 0 || n == 1) {
            return n;
        }
        return fib(n - 1) + fib(n - 2);

    }
---------------------------------------------------Power of two number-----------------------
 public static int power(int a, int b) {
        if (a == 1) {
            return b;

        }
        if (b == 1) {
            return a;
        }
        return a * power(a, b - 1);

    }
-------------------------------------------- optimal approach---------------
   public static int power(int a, int b) {
        if (b == 1) {
            return a;
        }
        if(a==1){
            return b;
        }
        int result=power(a, b/2);
        return result*result;
    }
------------------------------------------------------ SUm of n digits-------------------------
 static int sumOfDigits(int n) {
        // base case
        if (n == 0 || n == 1) {
            return n;
        }
        int sumOfStartindDigit = n / 10;
        int lastDigit = n % 10;
        return sumOfDigits(sumOfStartindDigit) + lastDigit;

    }
---------------------------------------------------------given a number num and a value k, print k multiples of num;---
  public static void multiples(int num, int k) {
        // base case
        if (k == 1) {
            System.out.print(num * k + " ");
            return;

        }
        multiples(num, k - 1);
        int finaal = num * k;
        System.out.print(finaal + " ");

    }
----------------------------------------------------------- given a number n. find the sum of natural numbers till n but with alternate singns;----------
 static int alternateSign(int n) {

        // base case
        if (n == 1) {
            return n;

        }
        if (n % 2 == 0) {
            return alternateSign(n - 1) - n;

        } else {
            return alternateSign(n - 1) + n;
        }
    }
------------------------------------------------------------ GCD(greatest common divisor)----------------------------
public static int GCD(int a,int b){
        if(a==0){
            return b;
        }
        if(b==0){
            return a;
        }
        if(a>b){
            return GCD(a-b, b);
        }else{
            return GCD(a, b-a);
        }
    }

---------------------------------------- print the array recurively;*----------------------------------------
// print the array recurively;
    public static void print(int[] arr, int idx) {
        if (idx == arr.length - 1) {
            System.out.print(arr[idx] + " ");
            return;
        }
        System.out.print(arr[idx] + " ");
        print(arr, idx + 1);
    }
-----------------------------------------------------------------print the max value of the array;-----------------------------
 public static int print(int[] arr, int idx) {
        if (idx == arr.length - 1) {
            return arr[idx];
        }

        int ans = print(arr, idx + 1);
     
        return Math.max(ans, arr[idx]);

    }
------------------------------------------------------------------------------